/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.amazonaws.services.simpleworkflow.flow.examples.hellolambda;

import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowClientBase;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericWorkflowClient;
import com.amazonaws.services.simpleworkflow.model.WorkflowExecution;
import com.amazonaws.services.simpleworkflow.model.WorkflowType;

class HelloLambdaWorkflowClientImpl extends WorkflowClientBase implements HelloLambdaWorkflowClient {

    public HelloLambdaWorkflowClientImpl(WorkflowExecution workflowExecution, WorkflowType workflowType,  
            StartWorkflowOptions options, DataConverter dataConverter, GenericWorkflowClient genericClient) {
        super(workflowExecution, workflowType, options, dataConverter, genericClient);
    }
    
    @Override
    public final Promise<Void> helloWorld(String name) { 
        return helloWorld(Promise.asPromise(name), (StartWorkflowOptions)null);
    }
    
    @Override
    public final Promise<Void> helloWorld(String name, Promise<?>... waitFor) {
        return helloWorld(Promise.asPromise(name), (StartWorkflowOptions)null, waitFor);
    }
    
    
    @Override
    
    public final Promise<Void> helloWorld(String name, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        return helloWorld(Promise.asPromise(name), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> helloWorld(Promise<String> name) {
        return helloWorld(name, (StartWorkflowOptions)null);
    }

    @Override
    public final Promise<Void> helloWorld(Promise<String> name, Promise<?>... waitFor) {
        return helloWorld(name, (StartWorkflowOptions)null, waitFor);
    }

    @Override
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public final Promise<Void> helloWorld(Promise<String> name, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        Promise[] _input_ = new Promise[1];
        _input_[0] = name;
        return (Promise) startWorkflowExecution(_input_, optionsOverride, Void.class, waitFor);
    }
    	

}