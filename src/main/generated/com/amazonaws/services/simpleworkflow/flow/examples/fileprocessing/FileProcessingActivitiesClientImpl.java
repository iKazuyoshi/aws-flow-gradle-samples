/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.amazonaws.services.simpleworkflow.flow.examples.fileprocessing;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class FileProcessingActivitiesClientImpl extends ActivitiesClientBase implements FileProcessingActivitiesClient {

	public FileProcessingActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public FileProcessingActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public FileProcessingActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<Void> processFile(String inputFileName, String outputFileName) {
        return processFileImpl(Promise.asPromise(inputFileName), Promise.asPromise(outputFileName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> processFile(String inputFileName, String outputFileName, Promise<?>... waitFor) {
        return processFileImpl(Promise.asPromise(inputFileName), Promise.asPromise(outputFileName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> processFile(String inputFileName, String outputFileName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return processFileImpl(Promise.asPromise(inputFileName), Promise.asPromise(outputFileName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> processFile(Promise<String> inputFileName, Promise<String> outputFileName) {
        return processFileImpl(inputFileName, outputFileName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> processFile(Promise<String> inputFileName, Promise<String> outputFileName, Promise<?>... waitFor) {
        return processFileImpl(inputFileName, outputFileName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> processFile(Promise<String> inputFileName, Promise<String> outputFileName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return processFileImpl(inputFileName, outputFileName, optionsOverride, waitFor);
    }
    
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> processFileImpl(final Promise<String> inputFileName, final Promise<String> outputFileName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("FileProcessingActivities.processFile");
		activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[2];
        _input_[0] = inputFileName;
        _input_[1] = outputFileName;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}