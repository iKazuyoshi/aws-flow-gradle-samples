/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.amazonaws.services.simpleworkflow.flow.examples.fileprocessing;

import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowClientBase;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericWorkflowClient;
import com.amazonaws.services.simpleworkflow.model.WorkflowExecution;
import com.amazonaws.services.simpleworkflow.model.WorkflowType;

class FileProcessingWorkflowClientImpl extends WorkflowClientBase implements FileProcessingWorkflowClient {

    public FileProcessingWorkflowClientImpl(WorkflowExecution workflowExecution, WorkflowType workflowType,  
            StartWorkflowOptions options, DataConverter dataConverter, GenericWorkflowClient genericClient) {
        super(workflowExecution, workflowType, options, dataConverter, genericClient);
    }
    
    @Override
    public final Promise<Void> processFile(String sourceBucketName, String sourceFilename, String targetBucketName, String targetFilename) { 
        return processFile(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(targetFilename), (StartWorkflowOptions)null);
    }
    
    @Override
    public final Promise<Void> processFile(String sourceBucketName, String sourceFilename, String targetBucketName, String targetFilename, Promise<?>... waitFor) {
        return processFile(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(targetFilename), (StartWorkflowOptions)null, waitFor);
    }
    
    
    @Override
    
    public final Promise<Void> processFile(String sourceBucketName, String sourceFilename, String targetBucketName, String targetFilename, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        return processFile(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(targetFilename), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> processFile(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<String> targetFilename) {
        return processFile(sourceBucketName, sourceFilename, targetBucketName, targetFilename, (StartWorkflowOptions)null);
    }

    @Override
    public final Promise<Void> processFile(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<String> targetFilename, Promise<?>... waitFor) {
        return processFile(sourceBucketName, sourceFilename, targetBucketName, targetFilename, (StartWorkflowOptions)null, waitFor);
    }

    @Override
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public final Promise<Void> processFile(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<String> targetFilename, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        Promise[] _input_ = new Promise[4];
        _input_[0] = sourceBucketName;
        _input_[1] = sourceFilename;
        _input_[2] = targetBucketName;
        _input_[3] = targetFilename;
        return (Promise) startWorkflowExecution(_input_, optionsOverride, Void.class, waitFor);
    }
    	

}