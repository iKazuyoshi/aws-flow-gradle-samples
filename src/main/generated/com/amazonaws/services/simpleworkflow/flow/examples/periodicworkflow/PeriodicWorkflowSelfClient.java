/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow;

import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowSelfClient;

/**
 * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow}. 
 * Used to continue a workflow execution as a new run.
 * Must be used from a worklfow scope. 
 */
public interface PeriodicWorkflowSelfClient extends WorkflowSelfClient
{

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(com.amazonaws.services.simpleworkflow.model.ActivityType activity, Object[] activityArguments, com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions options);

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(com.amazonaws.services.simpleworkflow.model.ActivityType activity, Object[] activityArguments, com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions options, Promise<?>... waitFor);

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(com.amazonaws.services.simpleworkflow.model.ActivityType activity, Object[] activityArguments, com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions options, StartWorkflowOptions optionsOverride, Promise<?>... waitFor);

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(Promise<com.amazonaws.services.simpleworkflow.model.ActivityType> activity, Promise<Object[]> activityArguments, Promise<com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions> options);

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(Promise<com.amazonaws.services.simpleworkflow.model.ActivityType> activity, Promise<Object[]> activityArguments, Promise<com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions> options, Promise<?>... waitFor);

    /**
     * Generated from {@link com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflow#startPeriodicWorkflow}
     */
    void startPeriodicWorkflow(Promise<com.amazonaws.services.simpleworkflow.model.ActivityType> activity, Promise<Object[]> activityArguments, Promise<com.amazonaws.services.simpleworkflow.flow.examples.periodicworkflow.PeriodicWorkflowOptions> options, StartWorkflowOptions optionsOverride, Promise<?>... waitFor);
}